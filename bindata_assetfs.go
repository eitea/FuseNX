// Code generated by go-bindata.
// sources:
// data/bin/restic.exe
// data/staticfiles/bootstrap/css/bootstrap.min.css
// data/staticfiles/bootstrap/fonts/glyphicons-halflings-regular.eot
// data/staticfiles/bootstrap/fonts/glyphicons-halflings-regular.svg
// data/staticfiles/bootstrap/fonts/glyphicons-halflings-regular.ttf
// data/staticfiles/bootstrap/fonts/glyphicons-halflings-regular.woff
// data/staticfiles/bootstrap/fonts/glyphicons-halflings-regular.woff2
// data/staticfiles/bootstrap/js/bootstrap.min.js
// data/staticfiles/favicon.png
// data/staticfiles/jquery-3.2.1.min.js
// data/staticfiles/logo.png
// data/staticfiles/style.css
// data/templates/backupjob.html
// data/templates/directorylist.html
// data/templates/editbackupjob.html
// data/templates/editrepository.html
// data/templates/filebrowser.html
// data/templates/help.html
// data/templates/imports.html
// data/templates/log.html
// data/templates/main.html
// data/templates/navbar.html
// data/templates/newbackupjob.html
// data/templates/newrepository.html
// data/templates/password.html
// data/templates/repository.html
// data/templates/settings.html
// data/templates/snapshotfile.html
// data/templates/snapshotlist.html
// data/templates_german/backupjob.html
// data/templates_german/directorylist.html
// data/templates_german/editbackupjob.html
// data/templates_german/editrepository.html
// data/templates_german/filebrowser.html
// data/templates_german/help.html
// data/templates_german/imports.html
// data/templates_german/log.html
// data/templates_german/main.html
// data/templates_german/navbar.html
// data/templates_german/newbackupjob.html
// data/templates_german/newrepository.html
// data/templates_german/password.html
// data/templates_german/repository.html
// data/templates_german/settings.html
// data/templates_german/snapshotfile.html
// data/templates_german/snapshotlist.html
// DO NOT EDIT!

package main

import (
	"net/http"
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

// bindataRead reads the given file from disk. It returns an error on failure.
func bindataRead(path, name string) ([]byte, error) {
	buf, err := ioutil.ReadFile(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset %s at %s: %v", name, path, err)
	}
	return buf, err
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

// dataBinResticExe reads file data from disk. It returns an error on failure.
func dataBinResticExe() (*asset, error) {
	path := "C:\\Users\\lukas\\go\\src\\github.com\\eitea\\FuseNX\\data\\bin\\restic.exe"
	name := "data/bin/restic.exe"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataStaticfilesBootstrapCssBootstrapMinCss reads file data from disk. It returns an error on failure.
func dataStaticfilesBootstrapCssBootstrapMinCss() (*asset, error) {
	path := "C:\\Users\\lukas\\go\\src\\github.com\\eitea\\FuseNX\\data\\staticfiles\\bootstrap\\css\\bootstrap.min.css"
	name := "data/staticfiles/bootstrap/css/bootstrap.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataStaticfilesBootstrapFontsGlyphiconsHalflingsRegularEot reads file data from disk. It returns an error on failure.
func dataStaticfilesBootstrapFontsGlyphiconsHalflingsRegularEot() (*asset, error) {
	path := "C:\\Users\\lukas\\go\\src\\github.com\\eitea\\FuseNX\\data\\staticfiles\\bootstrap\\fonts\\glyphicons-halflings-regular.eot"
	name := "data/staticfiles/bootstrap/fonts/glyphicons-halflings-regular.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataStaticfilesBootstrapFontsGlyphiconsHalflingsRegularSvg reads file data from disk. It returns an error on failure.
func dataStaticfilesBootstrapFontsGlyphiconsHalflingsRegularSvg() (*asset, error) {
	path := "C:\\Users\\lukas\\go\\src\\github.com\\eitea\\FuseNX\\data\\staticfiles\\bootstrap\\fonts\\glyphicons-halflings-regular.svg"
	name := "data/staticfiles/bootstrap/fonts/glyphicons-halflings-regular.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataStaticfilesBootstrapFontsGlyphiconsHalflingsRegularTtf reads file data from disk. It returns an error on failure.
func dataStaticfilesBootstrapFontsGlyphiconsHalflingsRegularTtf() (*asset, error) {
	path := "C:\\Users\\lukas\\go\\src\\github.com\\eitea\\FuseNX\\data\\staticfiles\\bootstrap\\fonts\\glyphicons-halflings-regular.ttf"
	name := "data/staticfiles/bootstrap/fonts/glyphicons-halflings-regular.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataStaticfilesBootstrapFontsGlyphiconsHalflingsRegularWoff reads file data from disk. It returns an error on failure.
func dataStaticfilesBootstrapFontsGlyphiconsHalflingsRegularWoff() (*asset, error) {
	path := "C:\\Users\\lukas\\go\\src\\github.com\\eitea\\FuseNX\\data\\staticfiles\\bootstrap\\fonts\\glyphicons-halflings-regular.woff"
	name := "data/staticfiles/bootstrap/fonts/glyphicons-halflings-regular.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataStaticfilesBootstrapFontsGlyphiconsHalflingsRegularWoff2 reads file data from disk. It returns an error on failure.
func dataStaticfilesBootstrapFontsGlyphiconsHalflingsRegularWoff2() (*asset, error) {
	path := "C:\\Users\\lukas\\go\\src\\github.com\\eitea\\FuseNX\\data\\staticfiles\\bootstrap\\fonts\\glyphicons-halflings-regular.woff2"
	name := "data/staticfiles/bootstrap/fonts/glyphicons-halflings-regular.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataStaticfilesBootstrapJsBootstrapMinJs reads file data from disk. It returns an error on failure.
func dataStaticfilesBootstrapJsBootstrapMinJs() (*asset, error) {
	path := "C:\\Users\\lukas\\go\\src\\github.com\\eitea\\FuseNX\\data\\staticfiles\\bootstrap\\js\\bootstrap.min.js"
	name := "data/staticfiles/bootstrap/js/bootstrap.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataStaticfilesFaviconPng reads file data from disk. It returns an error on failure.
func dataStaticfilesFaviconPng() (*asset, error) {
	path := "C:\\Users\\lukas\\go\\src\\github.com\\eitea\\FuseNX\\data\\staticfiles\\favicon.png"
	name := "data/staticfiles/favicon.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataStaticfilesJquery321MinJs reads file data from disk. It returns an error on failure.
func dataStaticfilesJquery321MinJs() (*asset, error) {
	path := "C:\\Users\\lukas\\go\\src\\github.com\\eitea\\FuseNX\\data\\staticfiles\\jquery-3.2.1.min.js"
	name := "data/staticfiles/jquery-3.2.1.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataStaticfilesLogoPng reads file data from disk. It returns an error on failure.
func dataStaticfilesLogoPng() (*asset, error) {
	path := "C:\\Users\\lukas\\go\\src\\github.com\\eitea\\FuseNX\\data\\staticfiles\\logo.png"
	name := "data/staticfiles/logo.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataStaticfilesStyleCss reads file data from disk. It returns an error on failure.
func dataStaticfilesStyleCss() (*asset, error) {
	path := "C:\\Users\\lukas\\go\\src\\github.com\\eitea\\FuseNX\\data\\staticfiles\\style.css"
	name := "data/staticfiles/style.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataTemplatesBackupjobHtml reads file data from disk. It returns an error on failure.
func dataTemplatesBackupjobHtml() (*asset, error) {
	path := "C:\\Users\\lukas\\go\\src\\github.com\\eitea\\FuseNX\\data\\templates\\backupjob.html"
	name := "data/templates/backupjob.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataTemplatesDirectorylistHtml reads file data from disk. It returns an error on failure.
func dataTemplatesDirectorylistHtml() (*asset, error) {
	path := "C:\\Users\\lukas\\go\\src\\github.com\\eitea\\FuseNX\\data\\templates\\directorylist.html"
	name := "data/templates/directorylist.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataTemplatesEditbackupjobHtml reads file data from disk. It returns an error on failure.
func dataTemplatesEditbackupjobHtml() (*asset, error) {
	path := "C:\\Users\\lukas\\go\\src\\github.com\\eitea\\FuseNX\\data\\templates\\editbackupjob.html"
	name := "data/templates/editbackupjob.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataTemplatesEditrepositoryHtml reads file data from disk. It returns an error on failure.
func dataTemplatesEditrepositoryHtml() (*asset, error) {
	path := "C:\\Users\\lukas\\go\\src\\github.com\\eitea\\FuseNX\\data\\templates\\editrepository.html"
	name := "data/templates/editrepository.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataTemplatesFilebrowserHtml reads file data from disk. It returns an error on failure.
func dataTemplatesFilebrowserHtml() (*asset, error) {
	path := "C:\\Users\\lukas\\go\\src\\github.com\\eitea\\FuseNX\\data\\templates\\filebrowser.html"
	name := "data/templates/filebrowser.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataTemplatesHelpHtml reads file data from disk. It returns an error on failure.
func dataTemplatesHelpHtml() (*asset, error) {
	path := "C:\\Users\\lukas\\go\\src\\github.com\\eitea\\FuseNX\\data\\templates\\help.html"
	name := "data/templates/help.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataTemplatesImportsHtml reads file data from disk. It returns an error on failure.
func dataTemplatesImportsHtml() (*asset, error) {
	path := "C:\\Users\\lukas\\go\\src\\github.com\\eitea\\FuseNX\\data\\templates\\imports.html"
	name := "data/templates/imports.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataTemplatesLogHtml reads file data from disk. It returns an error on failure.
func dataTemplatesLogHtml() (*asset, error) {
	path := "C:\\Users\\lukas\\go\\src\\github.com\\eitea\\FuseNX\\data\\templates\\log.html"
	name := "data/templates/log.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataTemplatesMainHtml reads file data from disk. It returns an error on failure.
func dataTemplatesMainHtml() (*asset, error) {
	path := "C:\\Users\\lukas\\go\\src\\github.com\\eitea\\FuseNX\\data\\templates\\main.html"
	name := "data/templates/main.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataTemplatesNavbarHtml reads file data from disk. It returns an error on failure.
func dataTemplatesNavbarHtml() (*asset, error) {
	path := "C:\\Users\\lukas\\go\\src\\github.com\\eitea\\FuseNX\\data\\templates\\navbar.html"
	name := "data/templates/navbar.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataTemplatesNewbackupjobHtml reads file data from disk. It returns an error on failure.
func dataTemplatesNewbackupjobHtml() (*asset, error) {
	path := "C:\\Users\\lukas\\go\\src\\github.com\\eitea\\FuseNX\\data\\templates\\newbackupjob.html"
	name := "data/templates/newbackupjob.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataTemplatesNewrepositoryHtml reads file data from disk. It returns an error on failure.
func dataTemplatesNewrepositoryHtml() (*asset, error) {
	path := "C:\\Users\\lukas\\go\\src\\github.com\\eitea\\FuseNX\\data\\templates\\newrepository.html"
	name := "data/templates/newrepository.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataTemplatesPasswordHtml reads file data from disk. It returns an error on failure.
func dataTemplatesPasswordHtml() (*asset, error) {
	path := "C:\\Users\\lukas\\go\\src\\github.com\\eitea\\FuseNX\\data\\templates\\password.html"
	name := "data/templates/password.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataTemplatesRepositoryHtml reads file data from disk. It returns an error on failure.
func dataTemplatesRepositoryHtml() (*asset, error) {
	path := "C:\\Users\\lukas\\go\\src\\github.com\\eitea\\FuseNX\\data\\templates\\repository.html"
	name := "data/templates/repository.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataTemplatesSettingsHtml reads file data from disk. It returns an error on failure.
func dataTemplatesSettingsHtml() (*asset, error) {
	path := "C:\\Users\\lukas\\go\\src\\github.com\\eitea\\FuseNX\\data\\templates\\settings.html"
	name := "data/templates/settings.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataTemplatesSnapshotfileHtml reads file data from disk. It returns an error on failure.
func dataTemplatesSnapshotfileHtml() (*asset, error) {
	path := "C:\\Users\\lukas\\go\\src\\github.com\\eitea\\FuseNX\\data\\templates\\snapshotfile.html"
	name := "data/templates/snapshotfile.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataTemplatesSnapshotlistHtml reads file data from disk. It returns an error on failure.
func dataTemplatesSnapshotlistHtml() (*asset, error) {
	path := "C:\\Users\\lukas\\go\\src\\github.com\\eitea\\FuseNX\\data\\templates\\snapshotlist.html"
	name := "data/templates/snapshotlist.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataTemplates_germanBackupjobHtml reads file data from disk. It returns an error on failure.
func dataTemplates_germanBackupjobHtml() (*asset, error) {
	path := "C:\\Users\\lukas\\go\\src\\github.com\\eitea\\FuseNX\\data\\templates_german\\backupjob.html"
	name := "data/templates_german/backupjob.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataTemplates_germanDirectorylistHtml reads file data from disk. It returns an error on failure.
func dataTemplates_germanDirectorylistHtml() (*asset, error) {
	path := "C:\\Users\\lukas\\go\\src\\github.com\\eitea\\FuseNX\\data\\templates_german\\directorylist.html"
	name := "data/templates_german/directorylist.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataTemplates_germanEditbackupjobHtml reads file data from disk. It returns an error on failure.
func dataTemplates_germanEditbackupjobHtml() (*asset, error) {
	path := "C:\\Users\\lukas\\go\\src\\github.com\\eitea\\FuseNX\\data\\templates_german\\editbackupjob.html"
	name := "data/templates_german/editbackupjob.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataTemplates_germanEditrepositoryHtml reads file data from disk. It returns an error on failure.
func dataTemplates_germanEditrepositoryHtml() (*asset, error) {
	path := "C:\\Users\\lukas\\go\\src\\github.com\\eitea\\FuseNX\\data\\templates_german\\editrepository.html"
	name := "data/templates_german/editrepository.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataTemplates_germanFilebrowserHtml reads file data from disk. It returns an error on failure.
func dataTemplates_germanFilebrowserHtml() (*asset, error) {
	path := "C:\\Users\\lukas\\go\\src\\github.com\\eitea\\FuseNX\\data\\templates_german\\filebrowser.html"
	name := "data/templates_german/filebrowser.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataTemplates_germanHelpHtml reads file data from disk. It returns an error on failure.
func dataTemplates_germanHelpHtml() (*asset, error) {
	path := "C:\\Users\\lukas\\go\\src\\github.com\\eitea\\FuseNX\\data\\templates_german\\help.html"
	name := "data/templates_german/help.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataTemplates_germanImportsHtml reads file data from disk. It returns an error on failure.
func dataTemplates_germanImportsHtml() (*asset, error) {
	path := "C:\\Users\\lukas\\go\\src\\github.com\\eitea\\FuseNX\\data\\templates_german\\imports.html"
	name := "data/templates_german/imports.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataTemplates_germanLogHtml reads file data from disk. It returns an error on failure.
func dataTemplates_germanLogHtml() (*asset, error) {
	path := "C:\\Users\\lukas\\go\\src\\github.com\\eitea\\FuseNX\\data\\templates_german\\log.html"
	name := "data/templates_german/log.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataTemplates_germanMainHtml reads file data from disk. It returns an error on failure.
func dataTemplates_germanMainHtml() (*asset, error) {
	path := "C:\\Users\\lukas\\go\\src\\github.com\\eitea\\FuseNX\\data\\templates_german\\main.html"
	name := "data/templates_german/main.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataTemplates_germanNavbarHtml reads file data from disk. It returns an error on failure.
func dataTemplates_germanNavbarHtml() (*asset, error) {
	path := "C:\\Users\\lukas\\go\\src\\github.com\\eitea\\FuseNX\\data\\templates_german\\navbar.html"
	name := "data/templates_german/navbar.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataTemplates_germanNewbackupjobHtml reads file data from disk. It returns an error on failure.
func dataTemplates_germanNewbackupjobHtml() (*asset, error) {
	path := "C:\\Users\\lukas\\go\\src\\github.com\\eitea\\FuseNX\\data\\templates_german\\newbackupjob.html"
	name := "data/templates_german/newbackupjob.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataTemplates_germanNewrepositoryHtml reads file data from disk. It returns an error on failure.
func dataTemplates_germanNewrepositoryHtml() (*asset, error) {
	path := "C:\\Users\\lukas\\go\\src\\github.com\\eitea\\FuseNX\\data\\templates_german\\newrepository.html"
	name := "data/templates_german/newrepository.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataTemplates_germanPasswordHtml reads file data from disk. It returns an error on failure.
func dataTemplates_germanPasswordHtml() (*asset, error) {
	path := "C:\\Users\\lukas\\go\\src\\github.com\\eitea\\FuseNX\\data\\templates_german\\password.html"
	name := "data/templates_german/password.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataTemplates_germanRepositoryHtml reads file data from disk. It returns an error on failure.
func dataTemplates_germanRepositoryHtml() (*asset, error) {
	path := "C:\\Users\\lukas\\go\\src\\github.com\\eitea\\FuseNX\\data\\templates_german\\repository.html"
	name := "data/templates_german/repository.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataTemplates_germanSettingsHtml reads file data from disk. It returns an error on failure.
func dataTemplates_germanSettingsHtml() (*asset, error) {
	path := "C:\\Users\\lukas\\go\\src\\github.com\\eitea\\FuseNX\\data\\templates_german\\settings.html"
	name := "data/templates_german/settings.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataTemplates_germanSnapshotfileHtml reads file data from disk. It returns an error on failure.
func dataTemplates_germanSnapshotfileHtml() (*asset, error) {
	path := "C:\\Users\\lukas\\go\\src\\github.com\\eitea\\FuseNX\\data\\templates_german\\snapshotfile.html"
	name := "data/templates_german/snapshotfile.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dataTemplates_germanSnapshotlistHtml reads file data from disk. It returns an error on failure.
func dataTemplates_germanSnapshotlistHtml() (*asset, error) {
	path := "C:\\Users\\lukas\\go\\src\\github.com\\eitea\\FuseNX\\data\\templates_german\\snapshotlist.html"
	name := "data/templates_german/snapshotlist.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/bin/restic.exe": dataBinResticExe,
	"data/staticfiles/bootstrap/css/bootstrap.min.css": dataStaticfilesBootstrapCssBootstrapMinCss,
	"data/staticfiles/bootstrap/fonts/glyphicons-halflings-regular.eot": dataStaticfilesBootstrapFontsGlyphiconsHalflingsRegularEot,
	"data/staticfiles/bootstrap/fonts/glyphicons-halflings-regular.svg": dataStaticfilesBootstrapFontsGlyphiconsHalflingsRegularSvg,
	"data/staticfiles/bootstrap/fonts/glyphicons-halflings-regular.ttf": dataStaticfilesBootstrapFontsGlyphiconsHalflingsRegularTtf,
	"data/staticfiles/bootstrap/fonts/glyphicons-halflings-regular.woff": dataStaticfilesBootstrapFontsGlyphiconsHalflingsRegularWoff,
	"data/staticfiles/bootstrap/fonts/glyphicons-halflings-regular.woff2": dataStaticfilesBootstrapFontsGlyphiconsHalflingsRegularWoff2,
	"data/staticfiles/bootstrap/js/bootstrap.min.js": dataStaticfilesBootstrapJsBootstrapMinJs,
	"data/staticfiles/favicon.png": dataStaticfilesFaviconPng,
	"data/staticfiles/jquery-3.2.1.min.js": dataStaticfilesJquery321MinJs,
	"data/staticfiles/logo.png": dataStaticfilesLogoPng,
	"data/staticfiles/style.css": dataStaticfilesStyleCss,
	"data/templates/backupjob.html": dataTemplatesBackupjobHtml,
	"data/templates/directorylist.html": dataTemplatesDirectorylistHtml,
	"data/templates/editbackupjob.html": dataTemplatesEditbackupjobHtml,
	"data/templates/editrepository.html": dataTemplatesEditrepositoryHtml,
	"data/templates/filebrowser.html": dataTemplatesFilebrowserHtml,
	"data/templates/help.html": dataTemplatesHelpHtml,
	"data/templates/imports.html": dataTemplatesImportsHtml,
	"data/templates/log.html": dataTemplatesLogHtml,
	"data/templates/main.html": dataTemplatesMainHtml,
	"data/templates/navbar.html": dataTemplatesNavbarHtml,
	"data/templates/newbackupjob.html": dataTemplatesNewbackupjobHtml,
	"data/templates/newrepository.html": dataTemplatesNewrepositoryHtml,
	"data/templates/password.html": dataTemplatesPasswordHtml,
	"data/templates/repository.html": dataTemplatesRepositoryHtml,
	"data/templates/settings.html": dataTemplatesSettingsHtml,
	"data/templates/snapshotfile.html": dataTemplatesSnapshotfileHtml,
	"data/templates/snapshotlist.html": dataTemplatesSnapshotlistHtml,
	"data/templates_german/backupjob.html": dataTemplates_germanBackupjobHtml,
	"data/templates_german/directorylist.html": dataTemplates_germanDirectorylistHtml,
	"data/templates_german/editbackupjob.html": dataTemplates_germanEditbackupjobHtml,
	"data/templates_german/editrepository.html": dataTemplates_germanEditrepositoryHtml,
	"data/templates_german/filebrowser.html": dataTemplates_germanFilebrowserHtml,
	"data/templates_german/help.html": dataTemplates_germanHelpHtml,
	"data/templates_german/imports.html": dataTemplates_germanImportsHtml,
	"data/templates_german/log.html": dataTemplates_germanLogHtml,
	"data/templates_german/main.html": dataTemplates_germanMainHtml,
	"data/templates_german/navbar.html": dataTemplates_germanNavbarHtml,
	"data/templates_german/newbackupjob.html": dataTemplates_germanNewbackupjobHtml,
	"data/templates_german/newrepository.html": dataTemplates_germanNewrepositoryHtml,
	"data/templates_german/password.html": dataTemplates_germanPasswordHtml,
	"data/templates_german/repository.html": dataTemplates_germanRepositoryHtml,
	"data/templates_german/settings.html": dataTemplates_germanSettingsHtml,
	"data/templates_german/snapshotfile.html": dataTemplates_germanSnapshotfileHtml,
	"data/templates_german/snapshotlist.html": dataTemplates_germanSnapshotlistHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"bin": &bintree{nil, map[string]*bintree{
			"restic.exe": &bintree{dataBinResticExe, map[string]*bintree{}},
		}},
		"staticfiles": &bintree{nil, map[string]*bintree{
			"bootstrap": &bintree{nil, map[string]*bintree{
				"css": &bintree{nil, map[string]*bintree{
					"bootstrap.min.css": &bintree{dataStaticfilesBootstrapCssBootstrapMinCss, map[string]*bintree{}},
				}},
				"fonts": &bintree{nil, map[string]*bintree{
					"glyphicons-halflings-regular.eot": &bintree{dataStaticfilesBootstrapFontsGlyphiconsHalflingsRegularEot, map[string]*bintree{}},
					"glyphicons-halflings-regular.svg": &bintree{dataStaticfilesBootstrapFontsGlyphiconsHalflingsRegularSvg, map[string]*bintree{}},
					"glyphicons-halflings-regular.ttf": &bintree{dataStaticfilesBootstrapFontsGlyphiconsHalflingsRegularTtf, map[string]*bintree{}},
					"glyphicons-halflings-regular.woff": &bintree{dataStaticfilesBootstrapFontsGlyphiconsHalflingsRegularWoff, map[string]*bintree{}},
					"glyphicons-halflings-regular.woff2": &bintree{dataStaticfilesBootstrapFontsGlyphiconsHalflingsRegularWoff2, map[string]*bintree{}},
				}},
				"js": &bintree{nil, map[string]*bintree{
					"bootstrap.min.js": &bintree{dataStaticfilesBootstrapJsBootstrapMinJs, map[string]*bintree{}},
				}},
			}},
			"favicon.png": &bintree{dataStaticfilesFaviconPng, map[string]*bintree{}},
			"jquery-3.2.1.min.js": &bintree{dataStaticfilesJquery321MinJs, map[string]*bintree{}},
			"logo.png": &bintree{dataStaticfilesLogoPng, map[string]*bintree{}},
			"style.css": &bintree{dataStaticfilesStyleCss, map[string]*bintree{}},
		}},
		"templates": &bintree{nil, map[string]*bintree{
			"backupjob.html": &bintree{dataTemplatesBackupjobHtml, map[string]*bintree{}},
			"directorylist.html": &bintree{dataTemplatesDirectorylistHtml, map[string]*bintree{}},
			"editbackupjob.html": &bintree{dataTemplatesEditbackupjobHtml, map[string]*bintree{}},
			"editrepository.html": &bintree{dataTemplatesEditrepositoryHtml, map[string]*bintree{}},
			"filebrowser.html": &bintree{dataTemplatesFilebrowserHtml, map[string]*bintree{}},
			"help.html": &bintree{dataTemplatesHelpHtml, map[string]*bintree{}},
			"imports.html": &bintree{dataTemplatesImportsHtml, map[string]*bintree{}},
			"log.html": &bintree{dataTemplatesLogHtml, map[string]*bintree{}},
			"main.html": &bintree{dataTemplatesMainHtml, map[string]*bintree{}},
			"navbar.html": &bintree{dataTemplatesNavbarHtml, map[string]*bintree{}},
			"newbackupjob.html": &bintree{dataTemplatesNewbackupjobHtml, map[string]*bintree{}},
			"newrepository.html": &bintree{dataTemplatesNewrepositoryHtml, map[string]*bintree{}},
			"password.html": &bintree{dataTemplatesPasswordHtml, map[string]*bintree{}},
			"repository.html": &bintree{dataTemplatesRepositoryHtml, map[string]*bintree{}},
			"settings.html": &bintree{dataTemplatesSettingsHtml, map[string]*bintree{}},
			"snapshotfile.html": &bintree{dataTemplatesSnapshotfileHtml, map[string]*bintree{}},
			"snapshotlist.html": &bintree{dataTemplatesSnapshotlistHtml, map[string]*bintree{}},
		}},
		"templates_german": &bintree{nil, map[string]*bintree{
			"backupjob.html": &bintree{dataTemplates_germanBackupjobHtml, map[string]*bintree{}},
			"directorylist.html": &bintree{dataTemplates_germanDirectorylistHtml, map[string]*bintree{}},
			"editbackupjob.html": &bintree{dataTemplates_germanEditbackupjobHtml, map[string]*bintree{}},
			"editrepository.html": &bintree{dataTemplates_germanEditrepositoryHtml, map[string]*bintree{}},
			"filebrowser.html": &bintree{dataTemplates_germanFilebrowserHtml, map[string]*bintree{}},
			"help.html": &bintree{dataTemplates_germanHelpHtml, map[string]*bintree{}},
			"imports.html": &bintree{dataTemplates_germanImportsHtml, map[string]*bintree{}},
			"log.html": &bintree{dataTemplates_germanLogHtml, map[string]*bintree{}},
			"main.html": &bintree{dataTemplates_germanMainHtml, map[string]*bintree{}},
			"navbar.html": &bintree{dataTemplates_germanNavbarHtml, map[string]*bintree{}},
			"newbackupjob.html": &bintree{dataTemplates_germanNewbackupjobHtml, map[string]*bintree{}},
			"newrepository.html": &bintree{dataTemplates_germanNewrepositoryHtml, map[string]*bintree{}},
			"password.html": &bintree{dataTemplates_germanPasswordHtml, map[string]*bintree{}},
			"repository.html": &bintree{dataTemplates_germanRepositoryHtml, map[string]*bintree{}},
			"settings.html": &bintree{dataTemplates_germanSettingsHtml, map[string]*bintree{}},
			"snapshotfile.html": &bintree{dataTemplates_germanSnapshotfileHtml, map[string]*bintree{}},
			"snapshotlist.html": &bintree{dataTemplates_germanSnapshotlistHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() http.FileSystem {
	for k := range _bintree.Children {
		return http.Dir(k)
	}
	panic("unreachable")
}
